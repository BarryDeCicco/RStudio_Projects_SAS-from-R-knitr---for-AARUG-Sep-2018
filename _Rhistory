install.packages("rmarkdown") # Make cool dynamic documents
install.packages("knitr") # Run R Code Chunks
install.packages("ggplot2") # For plotting
install.packages("DT") # Interactive HTML tables
## Add these packages to the current session to make sure they load correctly
library("rmarkdown") # Make cool dynamic documents
library("knitr") # Run R Code Chunks
library("ggplot2") # For plotting
library("DT") # Interactive HTML tables
library("rmarkdown") # Make cool dynamic documents
library("knitr") # Run R Code Chunks
library("ggplot2") # For plotting
library("DT") # Interactive HTML tables
library("devtools") # To include the session information
knitr::opts_chunk$set(echo = TRUE,  tidy=TRUE, warning=TRUE, error=TRUE,
message=TRUE)
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
library(ggplot2)
ggplot(mtcars, aes(x = mpg)) + xlab("Miles per Gallon") +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept=mean(mtcars$mpg), col="red")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Multiple plot function -
# from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
myplots <- list()  # new empty list
for(i in 1:ncol(mtcars)){
col <- names(mtcars)[i]
ggp <- ggplot(mtcars, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
geom_vline(xintercept = mean(mtcars[[col]]), col = "red")
myplots[[i]] <- ggp  # add each plot into plot list
}
multiplot(plotlist = myplots, cols = 4) # must load in multiplot function from the Rcookbook see http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Pander table
# install.packages("pander") # install pander first
library(pander)
pander(head(mtcars, n = 4))
library(DT)
# DT table = interactive
# install.packages("DT") # install DT first - already done.
library(DT)
datatable(head(mtcars, n = nrow(mtcars)), options = list(pageLength = 5))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
kable(head(mtcars, n = 4)) # kable table with 4 rows
# Pander table
# install.packages("pander") # install pander first
library(pander)
pander(head(mtcars, n = 4))
install.packages("plotly")  # Interactive plots
library("plotly")
knitr::opts_chunk$set(echo = TRUE)
library("plotly")
mtcars$car <- row.names(mtcars)
View(mtcars)
View(mtcars)
plot_ly(mtcars, x = wt, y = mpg,
text = paste("Car: ", car),
mode = "markers", color = wt, size = wt)
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
plot_ly(mtcars, x = hp, y = mpg,
text = paste("Car: ", car),
mode = "markers", color = hp, size = hp)
plot_ly(mtcars, x = ~hp, y = ~mpg,
text = paste("Car: ", car),
mode = "markers", color = ~hp, size = ~hp)
plot_ly(mtcars, x = ~hp, y = ~mpg,
text = paste("Car: ", ~car),
mode = "markers", color = ~hp, size = ~hp)
plot_ly(mtcars, x = ~hp, y = ~mpg,
text = ~paste("Car: ", ~car),
mode = "markers", color = ~hp, size = ~hp)
library(plotly)
mtcars$car <- row.names(mtcars)
plot_ly(mtcars, x = ~hp, y = ~mpg,
text = ~paste("Car: ", ~car),
mode = "markers", color = ~hp, size = ~hp)
plot_ly(mtcars, x = wt, y = mpg,
text = paste("Car: ", car),
mode = "markers", color = wt, size = wt)
plot_ly(mtcars, x = ~wt, y = ~mpg,
text = ~paste("Car: ", car),
mode = "markers", color = ~wt, size = ~wt)
plot_ly(mtcars, x = ~hp, y = ~mpg, type='scatter'
text = ~paste("Car: ", ~car),
plot_ly(mtcars, x = ~hp, y = ~mpg, type='scatter',
text = ~paste("Car: ", ~car),
mode = "markers", color = ~hp, size = ~hp)
plot_ly(mtcars, x = ~hp, y = ~mpg, type='scatter',
mode = "markers", color = ~hp, size = ~hp)
library(plotly)
mtcars$car <- row.names(mtcars)
plot_ly(mtcars, x = ~wt, y = ~mpg,  type='scatter',
text = ~paste("Car: ", car),
mode = "markers", color = ~wt, size = ~wt)
